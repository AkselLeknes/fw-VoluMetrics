from fpdf import FPDF
from datetime import datetime
from PyPDF2 import PdfMerger
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
from matplotlib.backends.backend_pdf import PdfPages
import os


# 1. Generate Cover Page
def create_cover_page(user, input_label, min_age, max_age, threshold, project_label):
    pdf = FPDF()
    pdf.add_page()

    # Title
    pdf.set_font("Arial", size=16)
    pdf.cell(200, 10, txt="UNITY Data Summary Report", ln=True, align='C')

    # Sub-title
    pdf.set_font("Arial", size=14)
    pdf.cell(200, 10, txt=input_label, ln=True, align='C')

    # Description
    pdf.set_font("Arial", size=12)
    pdf.ln(10)  # Line break
    pdf.multi_cell(0, 10, txt="This report provides a detailed summary of the input derived data provided."
                              " The data is analyzed based on sex and includes the calculation of brain volume z-scores for different age groups."
                              f" List of outliers has been generated based on z-scores outside of ±{threshold} SD."
                              " Custom options such as age filtering and polynomial fitting have been applied to the data.")

    # Timestamp
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    # user = "Niall Bourke"  # Placeholder for the user's name
    pdf.ln(10)
    pdf.cell(200, 10, txt=f"Generated By:", ln=True, align='L')
    pdf.cell(200, 10, txt=f"{user}", ln=True, align='L')
    pdf.cell(200, 10, txt=f"{timestamp}", ln=True, align='L')


    # Custom Options
    pdf.ln(10)
    pdf.multi_cell(0, 10, txt="Custom Options Used:\n"
                              f"1. Age Range: {min_age}-{max_age} months\n"
                              f"2. Outlier Threshold: ±{threshold} SD\n"
                              "2. Polynomial Fit: Degree 3 (Cubic)\n"
                              "3. Confidence Interval: 95%\n")
    # Ensure the directory exists
    output_dir = "/flywheel/v0/work/"
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    # Save the PDF
    pdf.output(os.path.join(output_dir, "cover_page.pdf"))
    cover = "/flywheel/v0/work/cover_page.pdf"
    print("Cover page has been generated.")
    return cover


# 2. Parse the CSV File
def parse_csv(filepath, project_label, age_min, age_max, threshold):

    """Parse the input CSV file.

    Returns:
        filtered_df (pd.DataFrame): Filtered DataFrame based on age range.
        n (int): Number of observations in the filtered data.
        n_projects (int): Number of unique projects in the filtered data.
        project_labels (list): Unique project labels in the filtered data.
        n_sessions (int): Number of unique sessions in the original data.
        n_clean_sessions (int): Number of unique sessions in the clean data after removing outliers.
        outlier_n (int): Number of participants flagged as outliers based on
    """
        
    # Example DataFrame with ages in months
    #  df = pd.read_csv('/Users/nbourke/GD/atom/unity/fw-gears/fw-untitled/UNITY-Derivatives-volumes.csv')
    df = pd.read_csv(filepath)
    n_sessions = df['session'].nunique()  # Number of unique sessions
    print("Number of unique sessions: ", n_sessions)
    print()

    # Define the bins and labels
    # These have been setup with finer granularity early on due to rapid growth and then coarser granularity later
    bins = [0, 1, 2, 3, 4, 5, 6, 8, 10, 12, 15, 18, 21, 24, 30, 36, 48, 60, 72, 84, 96, 108, 120, 144, 168, 192, 216, 252, 300]
    labels = ['0-1 month', '1-2 months', '2-3 months', '3-4 months', '4-5 months', '5-6 months',
            '6-8 months', '8-10 months', '10-12 months', '12-15 months', '15-18 months', 
            '18-21 months', '21-24 months', '24-30 months', '30-36 months','3-4 years', 
            '4-5 years', '5-6 years', '6-7 years', '7-8 years', '8-9 years', '9-10 years', 
            '10-12 years', '12-14 years', '14-16 years', '16-18 years', '18-21 years', '21-25 years']


    # Bin the ages
    # Rename the 'age' column to 'age_in_days'
    df.rename(columns={'age': 'age_in_days'}, inplace=True)
    df['age_in_months'] = df['age_in_days'] / 30.44
    df['age_group'] = pd.cut(df['age_in_months'], bins=bins, labels=labels, right=False)

    # Group by sex and age group
    grouped = df.groupby(['sex', 'age_group'])

    # Calculate mean and std for each group
    df['mean_total_intracranial'] = grouped['total intracranial'].transform('mean')
    df['std_total_intracranial'] = grouped['total intracranial'].transform('std')

    # Calculate z-scores
    df['z_score'] = (df['total intracranial'] - df['mean_total_intracranial']) / df['std_total_intracranial']

    # Check if 'project_label' exists, if not, assign a default value
    if 'project_label' not in df.columns:
        df['project_label'] = project_label  # Or any default value like None
        # Define the list of columns you want to retain
    columns_to_keep = ['project_label', 'subject',	'session',	'age_in_months', 'sex',	'acquisition',	'total intracranial', 'z_score']
        
    # Filter the DataFrame for subjects with z-scores outside of ±1.5 SD and retain only the specified columns
    outliers_df = df[(df['z_score'] < - threshold) | (df['z_score'] > threshold)][columns_to_keep]
    # Save the filtered DataFrame to a CSV file
    outliers_df.to_csv('/flywheel/v0/output/outliers_list.csv', index=False)
    outlier_n = len(outliers_df)

    # Step 3: Create a clean DataFrame by excluding the outliers
    clean_df = df[~df.index.isin(outliers_df.index)]

    n_clean_sessions = clean_df['session'].nunique()  # Number of unique sessions in the clean data

    # Optional: Save the clean DataFrame to a CSV file
    clean_df.to_csv('/flywheel/v0/work/clean_data.csv', index=False)


    # Set limit for the age range to be included in the analysis
    upper_age_limit = age_max
    lower_age_limit = age_min  

    # Filter the data to include only observations up to 30 months
    filtered_df = clean_df[(clean_df['age_in_months'] <= upper_age_limit) & (clean_df['age_in_months'] >= lower_age_limit)]

    n = len(filtered_df)  # Number of observations in the filtered data
    n_projects = filtered_df['project_label'].nunique()  # Number of unique projects in the filtered data
    project_labels = filtered_df['project_label'].unique()  # Unique project labels in the filtered data

    # --- Generate a summary report with plots and tables --- #

    # Calculate the count (n) for each age group
    age_group_counts = clean_df['age_group'].value_counts().sort_index()
    # Filter out age groups with a count of 0
    age_group_counts = age_group_counts[age_group_counts > 0]

    # Create a new label for each age group that includes the count
    age_group_labels = [f"{label}\n(n={age_group_counts[label]})" for label in age_group_counts.index]

    # Group by sex and age group and calculate the necessary statistics
    summary_table = clean_df.groupby(['age_group', 'sex']).agg({
        'subject': 'nunique',  # Count the number of unique participants
        'session': 'nunique',  # Count the number of unique sessions
        'total intracranial': ['mean', 'std']  # Mean and std of brain volume
    }).reset_index()

    # Remove rows where the mean of 'total intracranial' is NaN
    summary_table = summary_table.dropna(subset=[('total intracranial', 'mean')])

    # Pivot the table to have Sex as columns and Age Group as a single row index
    summary_table = summary_table.pivot(index='age_group', columns='sex')


    # Flatten the multi-level columns
    summary_table.columns = ['_'.join(col).strip() for col in summary_table.columns.values]

    # Reset index to make 'age_group' a column
    summary_table.reset_index(inplace=True)

    # Renaming columns for better readability
    summary_table.columns = [
        'Age Group', 
        'n sub (M)', 'n sub (F)', 
        'n ses (M)', 'n ses (F)',  
        'Mean TICV (M)', 'Mean TICV (F)', 
        'Std TICV (M)', 'Std TICV (F)'
    ]

    # Round the numerical columns to 2 decimal places
    summary_table = summary_table.round(2)
    return df, summary_table, filtered_df, n, n_projects, n_sessions, n_clean_sessions, outlier_n, project_labels, labels


# 3. Generate the Data Report
def create_data_report(df, summary_table, filtered_df, n, n_projects, n_sessions, n_clean_sessions, outlier_n, project_labels, labels, age_min, age_max, threshold):

    """Generate a data report with multiple plots and a summary table in a PDF format.

    Returns:
        
    """


    with PdfPages('/flywheel/v0/work/data_report.pdf') as pdf:
        report = '/flywheel/v0/work/data_report.pdf'
        # Define A4 full page size
        a4_fig_size = (8.27, 11.69)  # A4 size
        # --- Plot 1: Boxplot of all Z-Scores by Age Group with Sample Sizes --- #

        # Drop observations where 'age_group' is NaN
        df = df.dropna(subset=['age_group'])

        used_age_groups = [age for age in labels if age in df['age_group'].unique()]

        # Ensure that 'age_group' is treated as a categorical variable with the correct order (only for used categories)
        df['age_group'] = pd.Categorical(df['age_group'], categories=used_age_groups, ordered=True)

        # Calculate the count of participants per age group
        age_group_counts = df['age_group'].value_counts().sort_index()

        # Create new labels with counts
        age_group_labels = [f"{label}\n(n={age_group_counts[label]})" for label in used_age_groups]


        # Dynamically adjust font size based on the number of labels
        n_labels = len(used_age_groups)
        font_size = max(6, 8 - n_labels // 3)  # Scale the font size down as the number of labels increases

        # Create figure with full A4 size using plt.figure() (not plt.subplots)
        fig = plt.figure(figsize=a4_fig_size)

        # Define the position and size of the smaller figure within the A4 page
        # The numbers in add_axes([left, bottom, width, height]) are relative to the figure size, between 0 and 1
        ax = fig.add_axes([0.125, 0.5, 0.8, 0.4])  # Left, bottom, width, height (adjust these as needed)

        # Set the plot size and create the boxplot
        # fig, ax = plt.subplots(figsize=a4_fig_size)
        sns.boxplot(x='age_group', y='z_score', data=df, ax=ax, order=used_age_groups)
        ax.set_title('Z-Scores by Age Group')
        ax.set_xlabel('Age Group')
        ax.set_ylabel('Z-Score')

        # Adjust layout so that the plot takes only half of the A4 page (using height ratios)
        plt.subplots_adjust(top=0.9, bottom=0.6)  # Adjust 'bottom' to fit the lower half, 'top' to adjust upper limit
        
        # Set x-axis tick labels to show the age group labels in the correct order
        ax.set_xticklabels(age_group_labels, rotation=45)
        plt.setp(ax.get_xticklabels(), rotation=45, fontsize=font_size)  # Shift labels slightly to the left
        ax.grid(True)

        # Add explanation text below the plot
        plt.figtext(0.1, 0.1, 
                    "This boxplot displays the distribution of z-scores by age group.\n"
                    "Each box represents the interquartile range, with whiskers extending\n"
                    f"to show the range within {threshold} times the IQR.\n"
                    ""
                    f"Total number of unique sessions = {n_sessions}\n"
                    f"Number of sessions after removing outliers = {n_clean_sessions}\n"
                    f"{outlier_n} participants fell outside the {threshold} IQR range and are flagged for further review.",
                    wrap=True, horizontalalignment='left', fontsize=12,
                    bbox={'facecolor': 'lightgray', 'alpha': 0.5, 'pad': 10})  # Added padding for better spacing)

        # Adjust layout to ensure no overlap
        plt.subplots_adjust(top=0.85, bottom=0.4)  # Adjust to fit title and text properly

        pdf.savefig()  # Save plot and text to the PDF
        plt.close()


        # --- Plot 2: Summary Table of all Participants --- #
        
        
        # Create figure with full A4 size using plt.figure() (not plt.subplots)
        fig = plt.figure(figsize=a4_fig_size)
        ax = fig.add_axes([0.13, 0.5, 0.75, 0.4])  # Left, bottom, width, height (adjust these as needed)
        # Define the position and size of the smaller figure within the A4 page
        # The numbers in add_axes([left, bottom, width, height]) are relative to the figure size, between 0 and 1


        # fig, ax = plt.subplots(figsize=a4_fig_size)
        ax.axis('tight')
        ax.axis('off')

        # Increase font size for the table
        table = ax.table(cellText=summary_table.values, colLabels=summary_table.columns, cellLoc='center', loc='center')
        table.auto_set_font_size(False)
        table.set_fontsize(8)  # Adjust font size as needed
        table.scale(1.2, 1.2)  # Scale the table

        plt.title('Summary Descriptive Statistics', fontsize=16, pad=20)
        
        # Add explanation text below the table
        plt.figtext(0.13, 0.1,
                    "This table summarizes the descriptive statistics for the participants,\n"
                    "including the number of participants and sessions by sex and age group.",
                    wrap=True, horizontalalignment='left', fontsize=12,
                    bbox={'facecolor': 'lightgray', 'alpha': 0.5, 'pad': 10})  # Added padding for better spacing)

        # Adjust layout to ensure no overlap
        plt.subplots_adjust(top=0.85, bottom=0.2)  # Adjust to fit title and text properly
        
        pdf.savefig()  # Save the table to the PDF
        plt.close()


        # --- Plot 3: Histogram of Z-Scores --- #
        
        # Create figure with full A4 size using plt.figure() (not plt.subplots)
        fig = plt.figure(figsize=a4_fig_size)

        # Define the position and size of the smaller figure within the A4 page
        # The numbers in add_axes([left, bottom, width, height]) are relative to the figure size, between 0 and 1
        ax = fig.add_axes([0.125, 0.5, 0.8, 0.4])  # Left, bottom, width, height (adjust these as needed)

        # fig, ax = plt.subplots(figsize=a4_fig_size)
        sns.histplot(filtered_df['age_in_months'], bins=20, kde=True, ax=ax)
        ax.set_title('Distribution of Age in Months')
        ax.set_xlabel('Age')
        ax.set_ylabel('Frequency')
        ax.grid(True)
        
        # Add explanation text below the plot
        plt.figtext(0.05, 0.1, "This plot shows the distribution of participant ages in months.\n"
                            "The KDE curve provides a smoothed estimate of the age distribution.\n"
                            f"Plot limits set to {age_min}-{age_max} months, n = {n}.\n "
                                f"Included projects = {', '.join(project_labels)}",
                    wrap=True, horizontalalignment='left', fontsize=12,
                    bbox={'facecolor': 'lightgray', 'alpha': 0.5, 'pad': 10})  # Added padding for better spacing)

        # Adjust layout to ensure no overlap
        plt.subplots_adjust(top=0.85, bottom=0.2)  # Adjust to fit title and text properly
        
        pdf.savefig()  # Save plot and text to the PDF
        plt.close()


        # --- Plot 4: Polynomial fit with degree 3 (cubic) using sns.regplot --- #
        # Create figure with full A4 size using plt.figure() (not plt.subplots)
        fig = plt.figure(figsize=a4_fig_size)
        ax = fig.add_axes([0.125, 0.5, 0.8, 0.4])  # Left, bottom, width, height (adjust these as needed)

        # fig, ax = plt.subplots(figsize=a4_fig_size)
        sns.scatterplot(x='age_in_months', y='total intracranial', hue='sex', data=filtered_df, ax=ax)
        for sex in filtered_df['sex'].unique():
            sns.regplot(
                x='age_in_months', 
                y='total intracranial', 
                data=filtered_df[filtered_df['sex'] == sex], 
                order=3,  # Polynomial degree (3 for cubic)
                scatter=False, 
                ci=95,  # Confidence interval
                ax=ax
            )
        ax.set_title('Brain Volume vs. Age, Split by Sex (Polynomial Fit with CI)')
        ax.set_xlabel('Age (months)')
        ax.set_ylabel('Brain Volume')
        ax.grid(True)
        handles, labels = ax.get_legend_handles_labels()
        ax.legend(handles=handles[:2], labels=labels[:2], title='Sex')

        # Add explanation text below the plot
        plt.figtext(0.05, 0.1,  f"This scatter plot shows the relationship between age and total intracranial volume, \n"
                                f"with a cubic polynomial fit. The trend is separated by sex, and confidence intervals \n"
                                f"are included for each fit. Data points outside the initial study {threshold} IQR range are excluded from the plot.\n"
                                "\n"
                                f"Plot limits set to {age_min}-{age_max} months, \n"
                                f"n = {n}\n"
                                f"Included projects = {', '.join(project_labels)}",
                    wrap=True, horizontalalignment='left', fontsize=12,
                    bbox={'facecolor': 'lightgray', 'alpha': 0.5, 'pad': 10})  # Added padding for better spacing)

        # Adjust layout to ensure no overlap
        plt.subplots_adjust(top=0.85, bottom=0.2)  # Adjust to fit title and text properly

        pdf.savefig()  # Save plot and text to the PDF
        plt.close()

    print("PDF summary report has been generated.")
    return report


# 4. Merge the Cover Page and Data Report
def merge_pdfs(cover, report, final_report):
    merger = PdfMerger()

    print("Merging the cover page and data report...")
    print("Cover Page: ", cover)
    print("Data Report: ", report)
    print("Final Report: ", final_report)

    # Append the cover page
    merger.append(cover)

    # Append the data report
    merger.append(report)

    # Write to a final PDF
    merger.write(final_report)
    merger.close()